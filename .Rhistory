# this creates a new dataframe containing only trials with few distractors
# used in the following interaction plot
absent <- visual %>% filter(Target == "absent")
# plots the interaction for Distractor x Target (when Number = many)
interaction.plot(x.factor = many$Target, #x-axis variable
trace.factor = many$Distractor, #variable for lines
response = many$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Target (Absent or Present)", #x-axis label
trace.label = "Distractor", #Legend label
main = "Interaction plot: Distractor x Target (when Number = many)", #main title
col = c("red", "blue")) #adds color to the lines
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = absent$Distractor, #x-axis variable
trace.factor = absent$Number, #variable for lines
response = absent$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Target (when Number = few)", #main title
col = c("red", "blue")) #adds color to the lines
# plots the interaction for Distractor x Target (when Number = many)
interaction.plot(x.factor = many$Target, #x-axis variable
trace.factor = many$Distractor, #variable for lines
response = many$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Target (Absent or Present)", #x-axis label
trace.label = "Distractor", #Legend label
main = "Interaction plot: Distractor x Target (when Number = many)", #main title
col = c("red", "blue")) #adds color to the lines
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = absent$Distractor, #x-axis variable
trace.factor = absent$Number, #variable for lines
response = absent$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Target (when Number = few)", #main title
col = c("red", "blue")) #adds color to the lines
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = absent$Distractor, #x-axis variable
trace.factor = absent$Number, #variable for lines
response = absent$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Number (when Target = absent)", #maintitle
col = c("red", "blue")) #adds color to the lines
# this creates a new dataframe containing only trials with many distractors
# used in the following interaction plot
present <- visual %>% filter(Target == "present")
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = present$Distractor, #x-axis variable
trace.factor = present$Number, #variable for lines
response = present$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Number (Target = present)", #maintitle
col = c("red", "blue")) #adds color to the lines
summary(aov3)
aov4 <- aov(MeanScore ~ Target + Distractor + Number, data=visual)
summary(aov4)
aov4 <- aov(MeanScore ~ Target * Distractor * Number, data=visual)
summary(aov4)
### IMPORT the dataset 'visual.csv'
## select header=TRUE and stringsAsFactors=TRUE
## imports categorical variables (target, distractor, number) as factors
visual <- read.csv("data/visual.csv", header=TRUE, stringsAsFactors = TRUE)
View(visual)
## DV = MeanScore, IV = Target absence or presence
aov1 <- aov(MeanScore ~ Target, data=visual)
summary(aov1)
## DV = MeanScore, IV = Distractor O's or Y's
aov2 <- aov(MeanScore ~ Distractor, data=visual)
summary(aov2)
## DV = MeanScore, IV = Number few or many
aov3 <- aov(MeanScore ~ Number, data=visual)
summary(aov3)
# this creates a new dataframe containing only trials with few distractors
# used in the following interaction plot
few <- visual %>% filter(Number == "few")
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = few$Target, #x-axis variable
trace.factor = few$Distractor, #variable for lines
response = few$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Target (Absent or Present)", #x-axis label
trace.label = "Distractor", #legend label
main = "Interaction plot: Target x Distractor (when Number = few)", #main title
col = c("red", "blue")) #adds color to the lines
# this creates a new dataframe containing only trials with many distractors
# used in the following interaction plot
many <- visual %>% filter(Number == "many")
# plots the interaction for Distractor x Target (when Number = many)
interaction.plot(x.factor = many$Target, #x-axis variable
trace.factor = many$Distractor, #variable for lines
response = many$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Target (Absent or Present)", #x-axis label
trace.label = "Distractor", #Legend label
main = "Interaction plot: Target x Distractor (when Number = many)", #main title
col = c("red", "blue")) #adds color to the lines
# this creates a new dataframe containing only trials with few distractors
# used in the following interaction plot
absent <- visual %>% filter(Target == "absent")
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = absent$Distractor, #x-axis variable
trace.factor = absent$Number, #variable for lines
response = absent$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Number (Target = absent)", #maintitle
col = c("red", "blue")) #adds color to the lines
# this creates a new dataframe containing only trials with many distractors
# used in the following interaction plot
present <- visual %>% filter(Target == "present")
# plots the interaction for Distractor x Target (when Number = few)
interaction.plot(x.factor = present$Distractor, #x-axis variable
trace.factor = present$Number, #variable for lines
response = present$MeanScore, #y-axis variable
fun = mean, #metric to plot
ylab = "Combined Score (Accuracy * Confidence)", #y-axis label
xlab = "Distractor (O or Y)", #x-axis label
trace.label = "Number", #legend label
main = "Interaction plot: Distractor x Number (Target = present)", #maintitle
col = c("red", "blue")) #adds color to the lines
scales <- read.csv("data/cleaned_scaledata_long.csv", header=TRUE)
##### examine distributions of variables
hist(scales$procjust)
densityPlot(scales$procjust)
vif <- lm(orgjust ~ compete + support + socresp + innovate, data=scales)
vif(vif)
car::vif(vif)
vif <- lm(orgjust ~ AVI + compete + support + socresp + innovate, data=scales)
vif <- lm(orgjust ~ AVI.id + compete + support + socresp + innovate, data=scales)
car::vif(vif)
##### examine distributions of variables
hist(scales$procjust)
scales <- read.csv("data/cleaned_scaledata_long.csv", header=TRUE)
##### examine distributions of variables
hist(scales$procjust)
densityPlot(scales$procjust)
library(car)
densityPlot(scales$procjust)
hist(scales$interjust)
densityPlot(scales$interjust)
?hist
##### examine distributions of variables
hist(scales$procjust, breaks=20)
##### examine distributions of variables
hist(scales$procjust, breaks=20)
hist(scales$interjust, breaks=20)
hist(scales$orgjust, breaks=20)
hist(scales$genatrct, breaks=20)
densityPlot(scales$genatrct)
hist(scales$intpurs, , breaks=20)
hist(scales$intpurs, breaks=20)
densityPlot(scales$intpurs)
hist(scales$prest, breaks=20)
densityPlot(scales$prest)
hist(scales$orgatrct, breaks=20) #skewed, as are subscales
densityPlot(scales$orgatrct)
hist(scales$compete, breaks=20)
densityPlot(scales$compete)
hist(scales$socresp, breaks=20)
densityPlot(scales$socresp)
hist(scales$support, breaks=20)
hist(scales$innovate, breaks=20)
densityPlot(scales$innovate)
# QQ plot
scales.no.na <- na.omit(scales)
lm1 <- lm(orgatrct ~ AVI.id, data=scales.no.na)
plot(orgatrct ~ AVI.id, data=scales.no.na)
plot(lm1)
lm2 <- lm(orgjust ~ AVI.id, data=scales.no.na)
plot(orgjust ~ AVI.id, data=scales.no.na)
plot(lm2)
summary(lm3)
lm3 <- lm(innovate ~ AVI.id, data= scales.no.na)
plot(innovate ~ AVI.id, data=scales.no.na)
plot(lm3)
plot(orgatrct ~ jitter(innovate,2), data=scales.no.na)
abline(collinear, col="red")
## investigate collinearity   #Def some issues to address here ## still need VIF
collinear <- lm(orgjust ~ innovate, data=scales.no.na)
plot(orgatrct ~ jitter(innovate,2), data=scales.no.na)
abline(collinear, col="red")
plot(collinear)
plot(collinear1)
collinear1 <- lm(orgjust ~ compete, data=scales.no.na)
plot(collinear1)
collinear2 <- lm(orgjust ~ support, data=scales.no.na)
plot(orgjust ~ jitter(support,2), data=scales.no.na)
abline(collinear2, col="red")
plot(collinear2)
car::vif(vif)
vif <- lm(orgjust ~ AVI.id + compete + support + socresp + innovate, data=scales)
car::vif(vif)
#import data
items <- read.csv("data/cleaned_itemdata.long.csv", header=TRUE)
scales <- read.csv("data/cleaned_scaledata_long.csv", header=TRUE)
#libraries
library(psych)
View(items)
items.wide <- read.csv("data/cleaned_itemdata.wide.csv", header=TRUE)
View(items.wide)
#test-retest
testRetest(as.data.frame(items.wide[,1:18]), as.data.frame(items.wide[,50:67]))
#test-retest
cor(as.data.frame(items.wide[,1:18]), as.data.frame(items.wide[,50:67]))
items.wide <- read.csv("data/cleaned_itemdata.wide.csv", header=TRUE)
scales.wide <- read.csv("data/cleaned_scaledata_wide.csv", header=TRUE)
#test-retest (needs work)
cor(scales.wide$A_orgjust, scales.wide$B_orgjust)
#test-retest (needs work)
cor(scales.wide$A_orgjust, scales.wide$B_orgjust, na.omit())
?cor
#test-retest (needs work)
cor(scales.wide$A_orgjust, scales.wide$B_orgjust, na.rm=TRUE)
#test-retest (needs work)
cor(scales.wide$A_orgjust, scales.wide$B_orgjust, use="complete.obs")
?testRetest
#test-retest (needs work)
testRetest(scales.wide$A_orgjust, scales.wide$B_orgjust)
#libraries
library(psych)
#test-retest (needs work)
testRetest(scales.wide$A_orgjust, scales.wide$B_orgjust)
#test-retest (needs work)
cor.test(scales.wide$A_orgjust, scales.wide$B_orgjust)
cor.test(scales.wide$A_orgatrct, scales.wide$B_orgatrct)
cor.test(scales.wide$A_compete, scales.wide$B_compete)
cor.test(scales.wide$A_socresp, scales.wide$B_socresp)
cor.test(scales.wide$A_support, scales.wide$B_support)
cor.test(scales.wide$A_innovate, scales.wide$B_innovate)
#test-retest (needs work)
cor.test(scales.wide$A_orgjust, scales.wide$B_orgjust)
#import data
df <- read.csv("data/data_04.13.22.csv", header=TRUE)
"DATA PREPARATION FROM RAW FILE
-Delete unnecessary rows
-Delete unnecessary columns
-Delete cases that fail ATCs
-Screen extremely fast response
-Recode response options
-Change variable classes
-Recode reverse scored items
-Screen careless responding
-Restructure dataframes
-Compute scale scores
-create subsets
-create indicator variable for cond.
-Export to CSV files
"
## DELETE ROWS ##
# Delete unnecessary rows ##
df <- slice(df, -c(1:2))
#libraries
library(careless)
library(tidyr)
library(dplyr)
library(reshape2)
#import data
df <- read.csv("data/data_04.13.22.csv", header=TRUE)
"DATA PREPARATION FROM RAW FILE
-Delete unnecessary rows
-Delete unnecessary columns
-Delete cases that fail ATCs
-Screen extremely fast response
-Recode response options
-Change variable classes
-Recode reverse scored items
-Screen careless responding
-Restructure dataframes
-Compute scale scores
-create subsets
-create indicator variable for cond.
-Export to CSV files
"
## DELETE ROWS ##
# Delete unnecessary rows ##
df <- slice(df, -c(1:2))
# Delete all cases that did not agree to consent #
df <- subset(df, IC!="No, I do not want to be in this research study.")
# Delete cases that were practice runs by researchers #
df <- subset(df, JOB1!="cory test" & JOB1!="a")
## DELETE COLUMNS ##
df <- df %>%
select(-c(StartDate,
EndDate,
Status,
IPAddress,
Progress,
Finished,
RecordedDate,
ResponseId,
RecipientLastName,
RecipientFirstName,
RecipientEmail,
ExternalReference,
LocationLatitude,
LocationLongitude,
DistributionChannel,
UserLanguage,
IC,
TIMEA_First.Click,
TIMEA_Last.Click,
TIMEA_Page.Submit,
TIMEA_Click.Count,
TIMEB_First.Click,
TIMEB_Last.Click,
TIMEB_Page.Submit,
TIMEB_Click.Count,
ATC3,
GROUP))
## DELETE CASES THAT FAIL ATCs ##  <------ consider changing to 3 out of 4 (the breakdown is odd: ~33 missed AT1, ~15 missed ATC2, ~3-5 missed ATC4 and OCP1B_17 respectively)
df <- subset(df,
ATC1=="Strongly agree" &
ATC2=="Somewhat disagree" &
ATC4=="Neither agree nor disagree" &
OCP1B_17=="Very much")
## DELETE FAST RESPONSE ##
df$Duration..in.seconds. <- as.numeric(df$Duration..in.seconds.)
df <- df %>%
filter(Duration..in.seconds. > 300)
# delete ATCs and Duration columns
df <- df %>%
select(-c(Duration..in.seconds.,
ATC1,
ATC2,
ATC4,
OCP1B_17))
### RECODE RESPONSE OPTIONS ###
df[df=="Strongly disagree"] <- 1
df[df=="Somewhat disagree"] <- 2
df[df=="Neither agree nor disagree"] <-3
df[df=="Somewhat agree"] <- 4
df[df=="Strongly agree"] <- 5
df[df=="Not at all"] <- 1
df[df=="Minimally"] <- 2
df[df=="Moderately"] <- 3
df[df=="Considerably"] <- 4
df[df=="Very much"] <- 5
### CHANGE VARIABLE CLASSES ###
df[,2:99] <- lapply(df[,2:99], as.numeric)
### RECODE REVERSE SCORED ITEMS ###
df$GA2A <- 6 - df$GA2A
df$GA2B <- 6 - df$GA2B
### SCREEN CARELESS RESPONSE #
longstring <- longstring(df[,2:99], avg=TRUE)
boxplot(longstring)
longstring
ls <- longstring$longstr
df$ls <- ls #bind longstring values to df
names(df)
df <- df %>% #deletes cases with longstrings >= 28 (outliers)
filter(ls < 28)
#import data
items <- read.csv("data/cleaned_itemdata.long.csv", header=TRUE)
#first need to subset 'items' dataframe into scale item dataframes
spjs <- dplyr::select(items, 3:10, 12:20)
oa <- dplyr::select(items, 21:35)
culture <- dplyr::select(items, 36:51)
fa(spjs)
cfa1 <- fa(spjs, nfactors=2, rotate="oblimin") #best fits 3 factors
cfa1 <- fa(spjs, nfactors=2, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=8, rotate="oblimin") #best fits 3 factors
cfa1
cfa1$loadings
fa.diagram(cfa1)
cfa1
cfa1 <- fa(spjs, nfactors=2, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=3, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=2, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=8, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=7, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=8, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=7, rotate="oblimin") #best fits 3 factors
cfa1
cfa1 <- fa(spjs, nfactors=7, rotate="oblimin") #best fits 7 factors (one for each subscale)
cfa1
install.packages("fitMeasures")
library(fitMeasures)
install.packages("fitMeasures")
library(lavaan)
fitMeasures(cfa1, c("chisq.scaled", "df", "pvalue.scaled"))
lavaan::fitMeasures(cfa1, c("chisq.scaled", "df", "pvalue.scaled"))
?fitMeasures
fitMeasures(cfa1)
lavaan::fitMeasures(cfa1)
lavaan::fitMeasures(cfa1)
lavaan::fitMeasures(cfa1)
summary(cfa1)
fa.parallel(spjs)
cfa1 <- fa(spjs, nfactors=2, rotate="oblimin") #best fits 7 factors (one for each subscale)
cfa1
summary(cfa1)
cfa1
fitmeasures(cfa1)
detach(package::psych, unload = T)
detach("package::psych", unload = T)
?detach
detach(psych, unload=T)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package(psych)
fitmeasures(cfa1)
?cfa
cfa1
cfa1$chi
cfa1$STATISTIC
cfa1$dof
cfa1$PVAL
cfa1$RMSEA
orgjust.alpha <- dplyr::select(items, 3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20) ##removed ROA item (11)
a3 <- psych::alpha(orgjust.alpha)
a3
cfa1
cfa1$dof
cfa1$PVAL
cfa1$STATISTIC
cfa1$RMSEA
cfa1$rms
cfa1
cfa1$rms
compete.alpha <- dplyr::select(items, 36,37,38,39)
a8 <- psych::alpha(compete.alpha)
a8
socresp.alpha <- dplyr::select(items, 40,41,42,43)
a9 <- psych::alpha(socresp.alpha)
a9
support.alpha <- dplyr::select(items, 44,45,46,47)
a10 <- psych::alpha(support.alpha)
a10
innovate.alpha <- dplyr::select(items, 48,49,50,51)
a11 <- psych::alpha(innovate.alpha)
a11
fa.parallel(culture)
cfa3 <- fa(culture, nfactors=4, rotate="oblimin") ##messy 4-factor fit
#libraries
library(psych)
fa.parallel(culture)
cfa3 <- fa(culture, nfactors=4, rotate="oblimin") ##messy 4-factor fit
cfa3
cfa3$dof
cfa3$chi
cfa1$chi
cfa1$null.chisq
cfa1
cfa3$STATISTIC
cfa1$STATISTIC
cfa3$dof
cfa3$PVAL
cfa3$STATISTIC #model chi
cfa3$RMSEA
cfa3$rms
cfa3
cfa1$cfi
cfa1$fit
?cfa
?cfa
fa.parallel(oa)
cfa2 <- fa(oa, nfactors=1, rotate="oblimin") #could not fit 3-factor model, strongly 1
cfa2
cfa2$loadings
cfa2$dof
orgatrct.alpha <- dplyr::select(items, 21,22,23,24,25,26,27,28,29,30, 31,32,33,34,35)
a7 <- psych::alpha(orgatrct.alpha, check.keys = TRUE)
a7
fa.parallel(oa)
cfa2 <- fa(oa, nfactors=1, rotate="oblimin") #could not fit 3-factor model, strongly 1
cfa2$dof
cfa2$PVAL
cfa2$STATISTIC #model chi
cfa2$RMSEA
cfa2$rms
cfa2 <- fa(oa, nfactors=3, rotate="oblimin") #could not fit 3-factor model, strongly 1
cfa2
cfa2$loadings
cfa2$dof
cfa2$PVAL
cfa2$STATISTIC #model chi
cfa2$RMSEA
cfa2$rms
